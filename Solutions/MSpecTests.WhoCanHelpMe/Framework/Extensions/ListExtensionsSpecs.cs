//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace MSpecTests.WhoCanHelpMe.Framework.Extensions
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using global::WhoCanHelpMe.Framework.Extensions;

	using Machine.Specifications;

	public class context_for_list_extensions
	{
		protected static IList<int> listToAddTo;

		protected static IEnumerable<int> listToAdd;
	}

	[Subject(typeof(ListExtensions))]
	public class when_the_list_extensions_add_range_method_is_called : context_for_list_extensions
	{
		Establish context = () =>
			{
				listToAddTo = new List<int>();
				listToAdd = Enumerable.Range(1, 10);
			};

		Because of = () => listToAddTo.AddRange(listToAdd);

		It should_add_the_contents_of_the_collection_to_the_target_list = () => listToAddTo.Count.ShouldEqual(10);
	}

	[Subject(typeof(ListExtensions))]
	public class when_the_list_extensions_add_range_method_is_called_and_the_target_list_is_null : context_for_list_extensions
	{
		Establish context = () =>
		{
			listToAddTo = null;
			listToAdd = Enumerable.Range(1, 10);
		};

		It should_throw_an_argument_null_exception = () => Catch.Exception(() => listToAddTo.AddRange(listToAdd)).ShouldBeOfType<ArgumentNullException>();
	}

	[Subject(typeof(ListExtensions))]
	public class when_the_list_extensions_add_range_method_is_called_and_the_list_to_add_is_null : context_for_list_extensions
	{
		Establish context = () =>
		{
			listToAddTo = new List<int>();
			listToAdd = null;
		};

		It should_throw_an_argument_null_exception = () => Catch.Exception(() => listToAddTo.AddRange(listToAdd)).ShouldBeOfType<ArgumentNullException>();
	}
}