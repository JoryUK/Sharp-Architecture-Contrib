//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace MSpecTests.WhoCanHelpMe.Framework.Extensions
{
	using System;

	using global::WhoCanHelpMe.Framework.Extensions;

	using Machine.Specifications;

	public class context_for_string_extensions
	{
		Establish context = () =>
			{ };
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_is_null_or_empty_method_is_called_with_a_null_string : context_for_string_extensions
	{
		static string target;

		static bool result;

		Establish context = () => target = null;

		Because of = () => result = target.IsNullOrEmpty();

		It should_return_true = () => result.ShouldBeTrue();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_is_null_or_empty_method_is_called_with_an_empty_string : context_for_string_extensions
	{
		static string target;

		static bool result;

		Establish context = () => target = string.Empty;

		Because of = () => result = target.IsNullOrEmpty();

		It should_return_true = () => result.ShouldBeTrue();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_is_null_or_empty_method_is_called_with_a_string_that_has_a_value : context_for_string_extensions
	{
		static string target;

		static bool result;

		Establish context = () => target = "target";

		Because of = () => result = target.IsNullOrEmpty();

		It should_return_true = () => result.ShouldBeFalse();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_format_with_method_is_called : context_for_string_extensions
	{
		static string formatString = "This string will have {0} inserted into it.";

		static string valueToInsert = "the value";

		static string result;

		static string expectedResult = "This string will have the value inserted into it.";

		Because of = () => result = formatString.FormatWith(valueToInsert);

		It should_format_the_string_with_the_specified_value = () => result.ShouldEqual(expectedResult);
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_characters_method_is_called : context_for_string_extensions
	{
		static string targetString = "1234567890";

		static string result;

		static int charactersToGet = 5;

		static string expectedResult = "12345";

		Because of = () => result = targetString.FirstNCharacters(charactersToGet);

		It should_get_the_requested_number_of_characters = () => result.ShouldEqual(expectedResult);
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_characters_method_is_called_with_a_null_input_string : context_for_string_extensions
	{
		static string targetString = null;

		static int charactersToGet = 5;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.FirstNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_characters_method_is_called_with_an_empty_input_string : context_for_string_extensions
	{
		static string targetString = string.Empty;

		static int charactersToGet = 5;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.FirstNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_characters_method_is_called_with_an_input_string_shorter_than_the_number_of_characters_requested : context_for_string_extensions
	{
		static string targetString = "12345";

		static int charactersToGet = 10;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.FirstNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_last_n_characters_method_is_called : context_for_string_extensions
	{
		static string targetString = "1234567890";

		static string result;

		static int charactersToGet = 5;

		static string expectedResult = "67890";

		Because of = () => result = targetString.LastNCharacters(charactersToGet);

		It should_get_the_requested_number_of_characters = () => result.ShouldEqual(expectedResult);
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_last_n_characters_method_is_called_with_a_null_input_string : context_for_string_extensions
	{
		static string targetString = null;

		static int charactersToGet = 5;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.LastNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_last_n_characters_method_is_called_with_an_empty_input_string : context_for_string_extensions
	{
		static string targetString = string.Empty;

		static int charactersToGet = 5;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.LastNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_last_n_characters_method_is_called_with_an_input_string_shorter_than_the_number_of_characters_requested : context_for_string_extensions
	{
		static string targetString = "12345";

		static int charactersToGet = 10;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.LastNCharacters(charactersToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_words_method_is_called : context_for_string_extensions
	{
		static string targetString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce tempus viverra augue, ac blandit orci tempus sit amet. Praesent sodales.";

		static int wordsToGet = 10;

		static string result;

		static string expectedResult = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce tempus";

		Because of = () => result = targetString.FirstNWords(wordsToGet);

		It should_return_the_requested_number_of_words = () => result.ShouldEqual(expectedResult);
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_words_method_is_called_with_a_null_input_string : context_for_string_extensions
	{
		static string targetString = null;

		static int wordsToGet = 10;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.FirstNWords(wordsToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_words_method_is_called_with_an_empty_input_string : context_for_string_extensions
	{
		static string targetString = string.Empty;

		static int wordsToGet = 10;

		It should_throw_an_argument_exception = () => Catch.Exception(() => targetString.FirstNWords(wordsToGet)).ShouldBeOfType<ArgumentException>();
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_words_method_is_called_and_no_words_are_requested : context_for_string_extensions
	{
		static string targetString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce tempus viverra augue, ac blandit orci tempus sit amet. Praesent sodales.";

		static int wordsToGet = 0;

		static string result;

		Because of = () => result = targetString.FirstNWords(wordsToGet);

		It should_return_an_empty_string = () => result.Length.ShouldEqual(0);
	}

	[Subject(typeof(StringExtensions))]
	public class when_the_string_extensions_first_n_words_method_is_called_and_the_input_string_contains_fewer_words_than_the_number_requested : context_for_string_extensions
	{
		static string targetString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce tempus viverra augue, ac blandit orci tempus sit amet. Praesent sodales.";

		static int wordsToGet = 30;

		static string result;

		Because of = () => result = targetString.FirstNWords(wordsToGet);

		It should_return_the_input_string = () => result.ShouldEqual(targetString);
	}
}